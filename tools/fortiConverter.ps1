#Generated Form Function
# .Net methods for hiding/showing the console in the background
Add-Type -Name Window -Namespace Console -MemberDefinition '
[DllImport("Kernel32.dll")]
public static extern IntPtr GetConsoleWindow();

[DllImport("user32.dll")]
public static extern bool ShowWindow(IntPtr hWnd, Int32 nCmdShow);
'

function Show-Console
{
    $consolePtr = [Console.Window]::GetConsoleWindow()

    # Hide = 0,
    # ShowNormal = 1,
    # ShowMinimized = 2,
    # ShowMaximized = 3,
    # Maximize = 3,
    # ShowNormalNoActivate = 4,
    # Show = 5,
    # Minimize = 6,
    # ShowMinNoActivate = 7,
    # ShowNoActivate = 8,
    # Restore = 9,
    # ShowDefault = 10,
    # ForceMinimized = 11

    [Console.Window]::ShowWindow($consolePtr, 4)
}

function Hide-Console
{
    $consolePtr = [Console.Window]::GetConsoleWindow()
    #0 hide
    [Console.Window]::ShowWindow($consolePtr, 0)
}


function GenerateForm {
    ########################################################################
    # Code Generated By: SAPIEN Technologies PrimalForms (Community Edition) v1.0.9.0
    # Generated On: 26/03/2022 15:10
    # Generated By: dveg
    ########################################################################
    
    #region Import the Assemblies
    [reflection.assembly]::loadwithpartialname("System.Windows.Forms") | Out-Null
    [reflection.assembly]::loadwithpartialname("System.Drawing") | Out-Null
    #endregion
    
    #region Generated Form Objects
    $form1 = New-Object System.Windows.Forms.Form
    $textBox1 = New-Object System.Windows.Forms.TextBox
    $saveas = New-Object System.Windows.Forms.Button
    $openfile = New-Object System.Windows.Forms.Button
    $InitialFormWindowState = New-Object System.Windows.Forms.FormWindowState
    #endregion Generated Form Objects
    
    #----------------------------------------------
    #Generated Event Script Blocks
    #----------------------------------------------
    #Provide Custom Code for events specified in PrimalForms.
    $openfile_OnClick= 
    {
        $file = New-Object System.Windows.Forms.OpenFileDialog	-Property @{
            InitialDirectory = [System.Environment]::GetFolderPath("desktop")
        }
        $null = $file.ShowDialog()
        $filepath = $file.FileName
        $textBox1.Text = $filepath

    }
    
    $saveas_OnClick= 
    {
        $savepath = New-Object System.Windows.Forms.SaveFileDialog	-Property @{
            InitialDirectory = [System.Environment]::GetFolderPath("desktop")
            Filter = "*.csv|*.csv"
        }
        $null = $savepath.ShowDialog()
        $filepath = $savepath.FileName

        class rule {
            $id	
            $name	
            $uuid	
            $srcintf	
            $dstintf	
            $srcaddr	
            $dstaddr	
            $action	
            $schedule	
            $service	
            $logtraffic	
            $comments	
            ${capture-packet}
            ${auto-asic-offload}
            $status	
            $nat	
            ${internet-service}
            ${internet-service-id}
            ${learning-mode}
        
            rule ($id){$this.id = $id}
        }
        
        $filecontent = get-content  $textBox1.Text
        [regex]$policyValues = "^\s*set\s+(?'policy_key'\S+)\s+(?'policy_value'.*)$"
        
        if (get-variable currentRule){Remove-Variable currentrule} # in case of multiple run in the same shell
        
        $data = foreach ($line in $filecontent){
            
           if ($line -match 'edit \d+$'){
               if (get-variable currentRule -ErrorAction SilentlyContinue){$currentRule}
               $currentRule = [rule]::new(($line -replace "edit",'' -replace '\s',''))
            }
           if ($line -match 'set .+$'){
                $parsedLine = $policyValues.Matches($line)
                $value = ($parsedLine.groups | where {$_.name -eq "policy_value"}).value
                $name = ($parsedLine.groups | where {$_.name -eq "policy_key"}).Value
                $currentRule.$name = $value -replace '"',''
                
            }
        }
        
        $data += $currentRule # get the last rule
        
        $data | Export-Csv -Delimiter "," -NoTypeInformation -NoClobber $filepath -append 
        . $filepath
        
    
    }
    
    $OnLoadForm_StateCorrection=
    {#Correct the initial state of the form to prevent the .Net maximized form issue
        Hide-Console
        $form1.WindowState = $InitialFormWindowState
    }
    
    #----------------------------------------------
    #region Generated Form Code
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 88
    $System_Drawing_Size.Width = 369
    $form1.ClientSize = $System_Drawing_Size
    $form1.DataBindings.DefaultDataSourceUpdateMode = 0
    $form1.Name = "form1"
    $form1.Text = "FortiConverter"
    
    $textBox1.DataBindings.DefaultDataSourceUpdateMode = 0
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 13
    $System_Drawing_Point.Y = 13
    $textBox1.Location = $System_Drawing_Point
    $textBox1.Name = "textBox1"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 20
    $System_Drawing_Size.Width = 344
    $textBox1.Size = $System_Drawing_Size
    $textBox1.TabIndex = 2
    
    $form1.Controls.Add($textBox1)
    
    
    $saveas.DataBindings.DefaultDataSourceUpdateMode = 0
    
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 94
    $System_Drawing_Point.Y = 50
    $saveas.Location = $System_Drawing_Point
    $saveas.Name = "saveas"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 23
    $System_Drawing_Size.Width = 75
    $saveas.Size = $System_Drawing_Size
    $saveas.TabIndex = 1
    $saveas.Text = "convert ..."
    $saveas.UseVisualStyleBackColor = $True
    $saveas.add_Click($saveas_OnClick)
    
    $form1.Controls.Add($saveas)
    
    
    $openfile.DataBindings.DefaultDataSourceUpdateMode = 0
    
    $System_Drawing_Point = New-Object System.Drawing.Point
    $System_Drawing_Point.X = 13
    $System_Drawing_Point.Y = 50
    $openfile.Location = $System_Drawing_Point
    $openfile.Name = "openfile"
    $System_Drawing_Size = New-Object System.Drawing.Size
    $System_Drawing_Size.Height = 23
    $System_Drawing_Size.Width = 75
    $openfile.Size = $System_Drawing_Size
    $openfile.TabIndex = 0
    $openfile.Text = "open .."
    $openfile.UseVisualStyleBackColor = $True
    $openfile.add_Click($openfile_OnClick)
    
    $form1.Controls.Add($openfile)
    
    #endregion Generated Form Code
    
    #Save the initial state of the form
    $InitialFormWindowState = $form1.WindowState
    #Init the OnLoad event to correct the initial state of the form
    $form1.add_Load($OnLoadForm_StateCorrection)
    #Show the Form
    $form1.ShowDialog()| Out-Null
    
    } #End Function
    
    #Call the Function
    GenerateForm
    